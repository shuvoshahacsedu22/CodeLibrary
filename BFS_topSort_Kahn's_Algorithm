#include<set>
#include<map>
#include<cmath>
#include<queue>
#include<stack>
#include<vector>
#include<cctype>
#include<cstdio>
#include<string>
#include<sstream>
#include<cstring>
#include<cstdlib>
#include<fstream>
#include<iterator>
#include<iostream>
#include<algorithm>
#include<cassert>
#include<ctime>

using namespace std;

#pragma comment(linker,"/STACK:16777216")
#pragma warning(disable:4786)

#define max(a,b) ((a)>(b)?(a):(b))
#define min(a,b) ((a)<(b)?(a):(b))
#define myabs(a) ((a)<0?(-(a)):(a))
#define AIN(a, b, c) assert(b <= a && a <= c)
#define pi acos(-1.0)
#define CLR(a) memset(a,0,sizeof(a))
#define SET(a) memset(a,-1,sizeof(a))
#define pb push_back
#define all(a) a.begin(),a.end()
#define ff first
#define ss second
#define eps 1e-9
#define root 1
#define lft 2*idx
#define rgt 2*idx+1
#define cllft lft,st,mid,s,e
#define clrgt rgt,mid+1,ed,s,e
#define inf (1<<29)
#define ii64 long long
#define MX 1000002
#define INF 1000002
#define for(i,n) for(int i=0;i<n;i++)
#define debug(m) printf("%d",m);
typedef pair<int,int> pii;

vector<int> g[MX], gT[MX];
int inDegree[MX],par[MX],vis[MX],total[MX],color[MX],dis[MX],d[MX],f[MX],TIME;
void topSortKahn(int n)
{
    queue<int> Q;
    for(i,n) if(inDegree[i]==0) Q.push(i);
    int cnt=0;
    vector<int>top_order;
    while(!Q.empty())
    {
        int u=Q.front();
        Q.pop();
        top_order.pb(u);
        for(i,g[u].size())
        {
            int k=g[u][i];
            inDegree[k]--;
            if(inDegree[k]==0)
            Q.push(k);
        }
        cnt++;
    }
    if(cnt!=n) {cout<< "There exists a cycle in the graph\n";
    return;
    }
    for(i,top_order.size())
    cout<<top_order[i]<<" ";
    cout<<endl;
    return;
}

int main()
{
    //freopen("in.txt","r",stdin);
    //freopen("out.txt","w",stdout);
    int n,m,i,u,v;
    cin>>n>>m;
    while(m--)
    {
    scanf("%d%d",&u,&v);
    g[u].pb(v);
    inDegree[v]++;
    }
    topSortKahn(n);
    return 0;
}
