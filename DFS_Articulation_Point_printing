#include<set>
#include<map>
#include<cmath>
#include<queue>
#include<stack>
#include<vector>
#include<cctype>
#include<cstdio>
#include<string>
#include<sstream>
#include<cstring>
#include<cstdlib>
#include<fstream>
#include<iterator>
#include<iostream>
#include<algorithm>
#include<cassert>
#include<ctime>

using namespace std;

#pragma comment(linker,"/STACK:16777216")
#pragma warning(disable:4786)

#define max(a,b) ((a)>(b)?(a):(b))
#define min(a,b) ((a)<(b)?(a):(b))
#define myabs(a) ((a)<0?(-(a)):(a))
#define AIN(a, b, c) assert(b <= a && a <= c)
#define pi acos(-1.0)
#define CLR(a) memset(a,0,sizeof(a))
#define SET(a) memset(a,-1,sizeof(a))
#define pb push_back
#define all(a) a.begin(),a.end()
#define ff first
#define ss second
#define eps 1e-9
#define root 1
#define lft 2*idx
#define rgt 2*idx+1
#define cllft lft,st,mid,s,e
#define clrgt rgt,mid+1,ed,s,e
#define inf (1<<29)
#define ii64 long long
#define MX 1000002
#define INF 1000002
#define for(i,n) for(int i=0;i<n;i++)
#define debug(m) printf("%d",m);
typedef pair<int,int> pii;
vector<int> g[MX], gT[MX];

int low[MX],par[MX],visT[MX],vis[MX],total[MX],color[MX],dis[MX],d[MX],f[MX],TIME,artP[MX];

void DFS_Visit(int source)
{
    int children=0;
    color[source]=1;
    TIME=TIME+1;
    low[source] = d[source] = TIME;//discovery time =low time
    for(i,g[source].size())
    {
        int u=g[source][i];
        if(color[u] == 0)
        {
            children++;
            par[u]=source;
            DFS_Visit(u);
            low[source]=min(low[source],low[u]);
            if(par[source]==-1 && children>1) artP[source]=1;
            if(par[source]!=-1 && low[u]>= d[source] ) artP[source]=1;
        }
        else if (par[source]!=u) //w is not the parent of v then
        //--- (v,w) is a BACK edge
        low[source]=min(low[source],d[u]);
    }
    color[source]=2;//BLACK
    TIME = TIME+1;//finishing time not required at all so can skip this three line of code
    f[source] = TIME;
}
void DFS(int source,int n) // where prog starts
{
    for(i,n)
    {
        artP[i]=color[i] =0;
        par[i]=-1;
        low[i]=INF;
        f[i]=INF;
        d[i]=INF;
    }
    TIME = 0;
    for(i,n)
        if(color[i] == 0)
        {
            DFS_Visit(i);
        }
}
int main()
{
    //freopen("in.txt","r",stdin);
    //freopen("out.txt","w",stdout);
    int n,m,i,u,v;
    cin>>n>>m;
    while(m--)
    {
        scanf("%d%d",&u,&v);
        g[u].pb(v);
        g[v].pb(u);//since graph is uidirected
    }
    DFS(0,n);
    cout<<"Articulation points of the given graph are:";
    for(i,n) if(artP[i]==1) cout<<" "<<i;
    return 0;
}
