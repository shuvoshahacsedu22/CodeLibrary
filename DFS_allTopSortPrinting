#include<set>
#include<map>
#include<cmath>
#include<queue>
#include<stack>
#include<vector>
#include<cctype>
#include<cstdio>
#include<string>
#include<sstream>
#include<cstring>
#include<cstdlib>
#include<fstream>
#include<iterator>
#include<iostream>
#include<algorithm>
#include<cassert>
#include<ctime>

using namespace std;

#pragma comment(linker,"/STACK:16777216")
#pragma warning(disable:4786)

#define max(a,b) ((a)>(b)?(a):(b))
#define min(a,b) ((a)<(b)?(a):(b))
#define myabs(a) ((a)<0?(-(a)):(a))
#define AIN(a, b, c) assert(b <= a && a <= c)
#define pi acos(-1.0)
#define CLR(a) memset(a,0,sizeof(a))
#define SET(a) memset(a,-1,sizeof(a))
#define pb push_back
#define all(a) a.begin(),a.end()
#define ff first
#define ss second
#define eps 1e-9
#define root 1
#define lft 2*idx
#define rgt 2*idx+1
#define cllft lft,st,mid,s,e
#define clrgt rgt,mid+1,ed,s,e
#define inf (1<<29)
#define ii64 long long
#define MX 1000002
#define INF 1000002
#define for(i,n) for(int i=0;i<n;i++)
#define debug(m) printf("%d",m);
typedef pair<int,int> pii;
vector<int> g[MX], gT[MX];
int par[MX],vis[MX],total[MX],color[MX],dis[MX],d[MX],f[MX],TIME;
/*int no_of_path_DAG(int source,int destination)
{
   int cnt=0;
   if(source==destination) return 1;
   for(i,g[source].size())
   {
    int k=g[source][i];
    cnt+=no_of_path_DAG(k,destination);
   }
   return cnt;
}*/
int indegree[MX];
bool visited[MX];
int V;
void alltopologicalSortUtil(vector<int>& res,bool visited[])
{
    // To indicate whether all topological are found
    // or not
    bool flag = false;

    for (i,V)
    {
        //  If indegree is 0 and not yet visited then
        //  only choose that vertex
        if (indegree[i] == 0 && !visited[i])
        {
            //  reducing indegree of adjacent vertices
            for (j,g[i].size())
                indegree[g[i][j]]--;

            //  including in result
            res.push_back(i);
            visited[i] = true;
            alltopologicalSortUtil(res, visited);

            // resetting visited, res and indegree for
            // backtracking
            visited[i] = false;
            res.erase(res.end() - 1);
            for (j,g[i].size())
                indegree[g[i][j]]++;

            flag = true;
        }
    }

    //  We reach here if all vertices are visited.
    //  So we print the solution here
    if (!flag)
    {
        for (i,res.size())
            cout << res[i] << " ";
        cout << endl;
    }
}

int main()
{
    //freopen("in.txt","r",stdin);
    //freopen("out.txt","w",stdout);
    int n,m,i,u,v;
    cin>>n>>m;
    V=n;
    while(m--)
    {
    scanf("%d%d",&u,&v);
    g[u].pb(v);
    indegree[v]++;
    }
    vector<int> rec;
    alltopologicalSortUtil(rec,visited);
    return 0;
}
